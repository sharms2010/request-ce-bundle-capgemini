<%!

    public static class FilehubHelper {
        
        private static final long MILLISECONDS_IN_SECONDS = 1000;
        
        private String baseUrl;
        private java.util.Map<String,Filestore> filestoreConfigs = new java.util.HashMap<>();
        
        public FilehubHelper(String baseUrl) {
            this.baseUrl = baseUrl;
        }
        
        /*------------------------------------------------------------------------------------------
         * CONFIGURATION METHODS
         *----------------------------------------------------------------------------------------*/
        
        public FilehubHelper addFilestore(
            String filestoreSlug, 
            String key, 
            String secret, 
            FilehubHelper.Authorizer authorizer,
            FilehubHelper.PathBuilder pathBuilder
        ) {
            filestoreConfigs.put(filestoreSlug, 
                new Filestore(filestoreSlug, key, secret, authorizer, pathBuilder));
            return this;
        }
        
        /*------------------------------------------------------------------------------------------
         * METHODS
         *----------------------------------------------------------------------------------------*/
        
        public Filestore getFilestore(String filestoreSlug) {
            return filestoreSlug == null ? null : filestoreConfigs.get(filestoreSlug);
        }
        
        public boolean hasFilestore(String filestoreSlug) {
            return filestoreSlug != null && filestoreConfigs.containsKey(filestoreSlug);
        }
        
        public String url(String filestoreSlug, String path) {
            return url(filestoreSlug, path, null);
        }
        
        public String url(String filestoreSlug, String path, String filenameOverride) {
            // Retrieve the configured access key for the specified filestore
            Filestore filestore = filestoreConfigs.get(filestoreSlug);
            if (filestore == null) {
                throw new RuntimeException("Unconfigured filestore: "+filestoreSlug);
            }
            // Calculate the expiration to be 5 seconds from now
            Long expiration = System.currentTimeMillis()+(5*MILLISECONDS_IN_SECONDS);
            // Build the signature
            String seed = filestore.getSecret()+" GET "+
                path+"?expiration="+expiration;
            if (filenameOverride != null) {
                seed += "&filename="+filenameOverride;
            }
            String signature = com.google.common.io.BaseEncoding.base64Url().encode(
                com.google.common.hash.Hashing.sha1()
                    .hashString(seed, com.google.common.base.Charsets.UTF_8).asBytes());
            // Return the redirection path
            String result = baseUrl+"/filestores/"+filestoreSlug+"/"+path+
                "?expiration="+expiration+
                "&key="+filestore.getKey()+
                "&signature="+signature;
            if (filenameOverride != null) {
                result += "&filename="+
                    com.kineticdata.bundles.Text.escapeUrlParameter(filenameOverride);
            }
            return result;
        }
        
        /*------------------------------------------------------------------------------------------
         * HELPER CLASSES
         *----------------------------------------------------------------------------------------*/
            
        public static abstract class Authorizer {
            public abstract boolean canAccess(HttpServletRequest request);
        }

        public static abstract class PathBuilder {
            public abstract String buildPath(HttpServletRequest request);
        }
        
        public static class Filestore {
            private final Authorizer authorizer;
            private final String key;
            private final PathBuilder pathBuilder;
            private final String secret;
            private final String slug;
            public Filestore(
                String slug, 
                String key, 
                String secret, 
                Authorizer authorizer, 
                PathBuilder pathBuilder
            ) {
                this.key = key;
                this.secret = secret;
                this.slug = slug;
                this.authorizer = authorizer;
                this.pathBuilder = pathBuilder;
            }
            public String buildPath(HttpServletRequest request) {
                return pathBuilder.buildPath(request);
            }
            public boolean canAccess(HttpServletRequest request) {
                return authorizer.canAccess(request);
            }
            public String getKey() {
                return key;
            }
            public String getSecret() {
                return secret;
            }
            public String getSlug() {
                return slug;
            }
        }
        
    }

%>